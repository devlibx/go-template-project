// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package orderRoDataStore

import (
	"context"
)

const getAllOrders = `-- name: GetAllOrders :many
SELECT order_id, order_qty, amount, created_at, updated_at
FROM orders
ORDER BY created_at DESC
`

// GetAllOrders
//
//	SELECT order_id, order_qty, amount, created_at, updated_at
//	FROM orders
//	ORDER BY created_at DESC
func (q *Queries) GetAllOrders(ctx context.Context) ([]*Order, error) {
	rows, err := q.query(ctx, q.getAllOrdersStmt, getAllOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.OrderID,
			&i.OrderQty,
			&i.Amount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderByID = `-- name: GetOrderByID :one
SELECT order_id, order_qty, amount, created_at, updated_at
FROM orders
WHERE order_id = ?
`

// GetOrderByID
//
//	SELECT order_id, order_qty, amount, created_at, updated_at
//	FROM orders
//	WHERE order_id = ?
func (q *Queries) GetOrderByID(ctx context.Context, orderID string) (*Order, error) {
	row := q.queryRow(ctx, q.getOrderByIDStmt, getOrderByID, orderID)
	var i Order
	err := row.Scan(
		&i.OrderID,
		&i.OrderQty,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getOrderByIdNew = `-- name: GetOrderByIdNew :one
SELECT order_id, order_qty
FROM orders
WHERE order_id = ?
`

type GetOrderByIdNewRow struct {
	OrderID  string `json:"order_id"`
	OrderQty int32  `json:"order_qty"`
}

// GetOrderByIdNew
//
//	SELECT order_id, order_qty
//	FROM orders
//	WHERE order_id = ?
func (q *Queries) GetOrderByIdNew(ctx context.Context, orderID string) (*GetOrderByIdNewRow, error) {
	row := q.queryRow(ctx, q.getOrderByIdNewStmt, getOrderByIdNew, orderID)
	var i GetOrderByIdNewRow
	err := row.Scan(&i.OrderID, &i.OrderQty)
	return &i, err
}
