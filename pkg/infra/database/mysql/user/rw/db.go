// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package ordersDataStore

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createOrderStmt, err = db.PrepareContext(ctx, createOrder); err != nil {
		return nil, fmt.Errorf("error preparing query CreateOrder: %w", err)
	}
	if q.getAllOrdersStmt, err = db.PrepareContext(ctx, getAllOrders); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllOrders: %w", err)
	}
	if q.getOrderByIDStmt, err = db.PrepareContext(ctx, getOrderByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetOrderByID: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createOrderStmt != nil {
		if cerr := q.createOrderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createOrderStmt: %w", cerr)
		}
	}
	if q.getAllOrdersStmt != nil {
		if cerr := q.getAllOrdersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllOrdersStmt: %w", cerr)
		}
	}
	if q.getOrderByIDStmt != nil {
		if cerr := q.getOrderByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOrderByIDStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db               DBTX
	tx               *sql.Tx
	createOrderStmt  *sql.Stmt
	getAllOrdersStmt *sql.Stmt
	getOrderByIDStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:               tx,
		tx:               tx,
		createOrderStmt:  q.createOrderStmt,
		getAllOrdersStmt: q.getAllOrdersStmt,
		getOrderByIDStmt: q.getOrderByIDStmt,
	}
}
